/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**stateRepHeader.tlt
*********************************************************************/
 
//! \file waterSurfaceStateRepository.h
//! \brief Contains the DtOCEAN2020FOMWaterSurfaceStateRepository class declaration.
//! \ingroup OCEAN2020FOM_Environmental
 
#pragma once
 
#include "dllExport.h"
#include "VS_EnvironmentStateRepository.h"
#include <matrix/vlVector.h>
#include <vl/globalObjectDesignator.h>
#include <vl/hlaLogicalTime.h>
#include <vl/hlaLogicalTimeInterval.h>
#include <vlpi/entityType.h>
#include <vlpi/entityIdentifier.h>
#include <vlutil/vlString.h>
#include "DataTypes/OCEAN2020FOM_EnvironmentalEnums.h"
#include <vector>
 
#include "DataTypes/OCEAN2020FOMVariableLengthFloat32Array.h"

namespace OCEAN2020 {
 
//! Instances of DtOCEAN2020FOMWaterSurfaceStateRepository are used to store state data for
//! VS_Environment.WaterSurface objects.
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtOCEAN2020FOMWaterSurfaceStateRepository : public DtOCEAN2020FOMVS_EnvironmentStateRepository
{
public:
   //! Constructor.
   DtOCEAN2020FOMWaterSurfaceStateRepository();
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMWaterSurfaceStateRepository();
 
   //! Copy Constructor.
   DtOCEAN2020FOMWaterSurfaceStateRepository(const DtOCEAN2020FOMWaterSurfaceStateRepository& orig);
 
   //! Assignment Operator.
   DtOCEAN2020FOMWaterSurfaceStateRepository& operator=(const DtOCEAN2020FOMWaterSurfaceStateRepository& orig);
 
   //! Return a copy/empty object of the same type as this.
   virtual DtStateRepository* clone(bool copy) const;
 
   //! Create a DtOCEAN2020FOMWaterSurfaceStateRepository.
   static DtOCEAN2020FOMWaterSurfaceStateRepository* create();
   
   //! Print data to the DtInfo stream
   virtual void printData() const;
 
   //! Print data to the specified stream
   virtual void printDataToStream(std::ostream& stream) const;
 

   //! Set the BreakingWaveZone.
   virtual void setBreakingWaveZone(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the BreakingWaveZone."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& breakingWaveZone() const;

   //! Set the Wave_frequency.
   virtual void setWave_frequency(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the Wave_frequency."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& wave_frequency() const;

   //! Set the Wave_height.
   virtual void setWave_height(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the Wave_height."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& wave_height() const;

   //! Set the Wave_direction.
   virtual void setWave_direction(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the Wave_direction."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& wave_direction() const;

protected:
   DtOCEAN2020FOMVariableLengthFloat32Array myBreakingWaveZone;
   DtOCEAN2020FOMVariableLengthFloat32Array myWave_frequency;
   DtOCEAN2020FOMVariableLengthFloat32Array myWave_height;
   DtOCEAN2020FOMVariableLengthFloat32Array myWave_direction;
};

} //end OCEAN2020
