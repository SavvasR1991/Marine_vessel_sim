/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**stateRepHeader.tlt
*********************************************************************/
 
//! \file landStateRepository.h
//! \brief Contains the DtOCEAN2020FOMLandStateRepository class declaration.
//! \ingroup OCEAN2020FOM_Environmental
 
#pragma once
 
#include "dllExport.h"
#include "VS_EnvironmentStateRepository.h"
#include <matrix/vlVector.h>
#include <vl/globalObjectDesignator.h>
#include <vl/hlaLogicalTime.h>
#include <vl/hlaLogicalTimeInterval.h>
#include <vlpi/entityType.h>
#include <vlpi/entityIdentifier.h>
#include <vlutil/vlString.h>
#include "DataTypes/OCEAN2020FOM_EnvironmentalEnums.h"
#include <vector>
 
#include "DataTypes/OCEAN2020FOMVariableLengthFloat32Array.h"

namespace OCEAN2020 {
 
//! Instances of DtOCEAN2020FOMLandStateRepository are used to store state data for
//! VS_Environment.Land objects.
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtOCEAN2020FOMLandStateRepository : public DtOCEAN2020FOMVS_EnvironmentStateRepository
{
public:
   //! Constructor.
   DtOCEAN2020FOMLandStateRepository();
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMLandStateRepository();
 
   //! Copy Constructor.
   DtOCEAN2020FOMLandStateRepository(const DtOCEAN2020FOMLandStateRepository& orig);
 
   //! Assignment Operator.
   DtOCEAN2020FOMLandStateRepository& operator=(const DtOCEAN2020FOMLandStateRepository& orig);
 
   //! Return a copy/empty object of the same type as this.
   virtual DtStateRepository* clone(bool copy) const;
 
   //! Create a DtOCEAN2020FOMLandStateRepository.
   static DtOCEAN2020FOMLandStateRepository* create();
   
   //! Print data to the DtInfo stream
   virtual void printData() const;
 
   //! Print data to the specified stream
   virtual void printDataToStream(std::ostream& stream) const;
 

   //! Set the LandRegionId.
   virtual void setLandRegionId(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the LandRegionId."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& landRegionId() const;

   //! Set the TerrainType.
   virtual void setTerrainType(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the TerrainType."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& terrainType() const;

   //! Set the SnowAccumulation.
   virtual void setSnowAccumulation(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the SnowAccumulation."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& snowAccumulation() const;

   //! Set the IceAccretion.
   virtual void setIceAccretion(const DtOCEAN2020FOMVariableLengthFloat32Array& val);
 
   //! Get the IceAccretion."
   virtual const DtOCEAN2020FOMVariableLengthFloat32Array& iceAccretion() const;

protected:
   DtOCEAN2020FOMVariableLengthFloat32Array myLandRegionId;
   DtOCEAN2020FOMVariableLengthFloat32Array myTerrainType;
   DtOCEAN2020FOMVariableLengthFloat32Array mySnowAccumulation;
   DtOCEAN2020FOMVariableLengthFloat32Array myIceAccretion;
};

} //end OCEAN2020
