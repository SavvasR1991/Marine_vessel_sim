/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hobjDecHeader.tlt
*********************************************************************/
 
//! \file airColumnDecoderHLA.h
//! \brief Contains the DtOCEAN2020FOMAirColumnDecoder class declaration.
//! \ingroup OCEAN2020FOM_Environmental
 
#pragma once
 
#if DtHLA 
 
#include "VS_EnvironmentDecoderHLA.h"
#include "dllExport.h"
 
namespace OCEAN2020 {
 
class DtOCEAN2020FOMAirColumnStateRepository;
 
//! Instances of DtOCEAN2020FOMAirColumnDecoder are used to decode
//! data from the network into DtOCEAN2020FOMAirColumnStateRepository objects.
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtOCEAN2020FOMAirColumnDecoder : public DtOCEAN2020FOMVS_EnvironmentDecoder
{
public:
   //! Default constructor.
   DtOCEAN2020FOMAirColumnDecoder(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMAirColumnDecoder();
 
   //! Copy constructor.
   DtOCEAN2020FOMAirColumnDecoder(const DtOCEAN2020FOMAirColumnDecoder& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMAirColumnDecoder& operator=(const DtOCEAN2020FOMAirColumnDecoder& orig);
 
public:
   //! Creates an instance of DtOCEAN2020FOMAirColumnDecoder.
   static DtHlaStateDecoder* create(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
 
protected:
   
//! Decodes NumberOfLayers from attrs into rep.
   static void decodeNumberOfLayers(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes LowerLayer from attrs into rep.
   static void decodeLowerLayer(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes HigherLayer from attrs into rep.
   static void decodeHigherLayer(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Layers from attrs into rep.
   static void decodeLayers(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SunAzimuth from attrs into rep.
   static void decodeSunAzimuth(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SunElevation from attrs into rep.
   static void decodeSunElevation(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes FogCloudDensity from attrs into rep.
   static void decodeFogCloudDensity(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes GustDirection from attrs into rep.
   static void decodeGustDirection(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes GustDuration from attrs into rep.
   static void decodeGustDuration(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes GustIntensity from attrs into rep.
   static void decodeGustIntensity(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes RainfallRate from attrs into rep.
   static void decodeRainfallRate(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes RelativeHumidity from attrs into rep.
   static void decodeRelativeHumidity(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SnowfallRate from attrs into rep.
   static void decodeSnowfallRate(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SolarRadiation from attrs into rep.
   static void decodeSolarRadiation(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SustainedWindDirection from attrs into rep.
   static void decodeSustainedWindDirection(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SustainedWindIntensity from attrs into rep.
   static void decodeSustainedWindIntensity(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Temperature from attrs into rep.
   static void decodeTemperature(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes WindShear from attrs into rep.
   static void decodeWindShear(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Pressure from attrs into rep.
   static void decodePressure(
      DtOCEAN2020FOMAirColumnStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);

};
 
} //end OCEAN2020
 
#endif
