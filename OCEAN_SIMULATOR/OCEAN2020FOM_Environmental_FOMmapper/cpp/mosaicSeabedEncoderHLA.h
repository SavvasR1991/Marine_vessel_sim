/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hobjEncHeader.tlt
*********************************************************************/
 
//! \file mosaicSeabedEncoderHLA.h
//! \brief Contains the DtOCEAN2020FOMMosaicSeabedEncoder class declaration.
 
#pragma once
 
#if DtHLA
 
#include "VS_EnvironmentEncoderHLA.h"
#include "dllExport.h"
 
namespace OCEAN2020 {
 
class DtOCEAN2020FOMMosaicSeabedStateRepository;
 
//! Instances of DtOCEAN2020FOMMosaicSeabedEncoder encode data
//! from DtOCEAN2020FOMMosaicSeabedStateRepository objects to the net
//! structures to be sent to the network.
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtOCEAN2020FOMMosaicSeabedEncoder : public DtOCEAN2020FOMVS_EnvironmentEncoder
{
public:
 
   //! Default constructor.
   DtOCEAN2020FOMMosaicSeabedEncoder(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMMosaicSeabedEncoder();
 
   //! Copy constructor.
   DtOCEAN2020FOMMosaicSeabedEncoder(const DtOCEAN2020FOMMosaicSeabedEncoder& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMMosaicSeabedEncoder& operator=(const DtOCEAN2020FOMMosaicSeabedEncoder& orig);
 
public:
   //! Function that creates a DtOCEAN2020FOMMosaicSeabedEncoder.
   static DtHlaStateEncoder* create(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
   
protected:

   //! Return true if BT_Clutter needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Clutter(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Clutter from rep into attrs.
   static void encodeBT_Clutter(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Clutter_Var needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Clutter_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Clutter_Var from rep into attrs.
   static void encodeBT_Clutter_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Posidonia needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Posidonia(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Posidonia from rep into attrs.
   static void encodeBT_Posidonia(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Posidonia_Var needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Posidonia_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Posidonia_Var from rep into attrs.
   static void encodeBT_Posidonia_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_PosidoniaRipples needs to be sent
   //! to the network, false otherwise.
   static bool needBT_PosidoniaRipples(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_PosidoniaRipples from rep into attrs.
   static void encodeBT_PosidoniaRipples(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_PosidoniaRipples_Var needs to be sent
   //! to the network, false otherwise.
   static bool needBT_PosidoniaRipples_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_PosidoniaRipples_Var from rep into attrs.
   static void encodeBT_PosidoniaRipples_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Ripples needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Ripples(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Ripples from rep into attrs.
   static void encodeBT_Ripples(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Ripples_Var needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Ripples_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Ripples_Var from rep into attrs.
   static void encodeBT_Ripples_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_SMO needs to be sent
   //! to the network, false otherwise.
   static bool needBT_SMO(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_SMO from rep into attrs.
   static void encodeBT_SMO(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_SMO_Var needs to be sent
   //! to the network, false otherwise.
   static bool needBT_SMO_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_SMO_Var from rep into attrs.
   static void encodeBT_SMO_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Ripple_Angl needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Ripple_Angl(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Ripple_Angl from rep into attrs.
   static void encodeBT_Ripple_Angl(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if BT_Ripple_Angl_Var needs to be sent
   //! to the network, false otherwise.
   static bool needBT_Ripple_Angl_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes BT_Ripple_Angl_Var from rep into attrs.
   static void encodeBT_Ripple_Angl_Var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if Clusters needs to be sent
   //! to the network, false otherwise.
   static bool needClusters(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes Clusters from rep into attrs.
   static void encodeClusters(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if DPCA needs to be sent
   //! to the network, false otherwise.
   static bool needDPCA(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes DPCA from rep into attrs.
   static void encodeDPCA(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if Lacunarity needs to be sent
   //! to the network, false otherwise.
   static bool needLacunarity(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes Lacunarity from rep into attrs.
   static void encodeLacunarity(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if Py_b0 needs to be sent
   //! to the network, false otherwise.
   static bool needPy_b0(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes Py_b0 from rep into attrs.
   static void encodePy_b0(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if Py_b1 needs to be sent
   //! to the network, false otherwise.
   static bool needPy_b1(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes Py_b1 from rep into attrs.
   static void encodePy_b1(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if Py_b2 needs to be sent
   //! to the network, false otherwise.
   static bool needPy_b2(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes Py_b2 from rep into attrs.
   static void encodePy_b2(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if Ripple needs to be sent
   //! to the network, false otherwise.
   static bool needRipple(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes Ripple from rep into attrs.
   static void encodeRipple(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if RRM_E needs to be sent
   //! to the network, false otherwise.
   static bool needRRM_E(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes RRM_E from rep into attrs.
   static void encodeRRM_E(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if RRM_var needs to be sent
   //! to the network, false otherwise.
   static bool needRRM_var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes RRM_var from rep into attrs.
   static void encodeRRM_var(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if SurveyStatus needs to be sent
   //! to the network, false otherwise.
   static bool needSurveyStatus(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& stateRep, 
      const DtOCEAN2020FOMMosaicSeabedStateRepository& asSeenByRemote);
 
   //! Encodes SurveyStatus from rep into attrs.
   static void encodeSurveyStatus(
      const DtOCEAN2020FOMMosaicSeabedStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

};
 
} //end OCEAN2020
 
#endif
