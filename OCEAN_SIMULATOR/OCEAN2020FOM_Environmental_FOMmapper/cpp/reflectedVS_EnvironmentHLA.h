/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hrefObjHeader.tlt
*********************************************************************/
 
//! \file <!HlaRefObj!>.h
//! \brief Contains the DtReflectedOCEAN2020FOMVS_Environment class declaration.
//! \ingroup OCEAN2020FOM_Environmental
 
#pragma once
 
#if DtHLA
 
#include <vl/reflectedObjectHLA.h>
#include "dllExport.h"
#include "VS_EnvironmentStateRepository.h"
 
namespace OCEAN2020 {
 
class DtReflectedOCEAN2020FOMVS_Environment;
 
//! Signature of the callback function that takes a DtReflectedOCEAN2020FOMVS_Environment
//! and user data
//! \ingroup OCEAN2020FOM_Environmental
typedef void (*DtOCEAN2020FOMVS_EnvironmentCallbackFunction)(
   DtReflectedOCEAN2020FOMVS_Environment* obj, void* userData);
 
//! Instances of DtReflectedOCEAN2020FOMVS_Environment are used to represent a
//! simulated HLAobjectRoot.VS_Environment
//! object reflected across a network. 
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtReflectedOCEAN2020FOMVS_Environment : public DtReflectedObject
{
public:
   //! Function prototype for functions that create a
   //! DtOCEAN2020FOMVS_EnvironmentStateRepository.
   typedef DtOCEAN2020FOMVS_EnvironmentStateRepository* (*DtStateRepCreator)();
 
public:
   //! Constructor.
   DtReflectedOCEAN2020FOMVS_Environment(DtHlaObject* obj, DtExerciseConn* exConn);
 
   //! Destructor.
   virtual ~DtReflectedOCEAN2020FOMVS_Environment();
 
   //! Returns the VS_Environment's state repository.
   virtual DtOCEAN2020FOMVS_EnvironmentStateRepository* VS_EnvironmentStateRep() const;
 
   //! Shorter version of lifeformRep.
   virtual DtOCEAN2020FOMVS_EnvironmentStateRepository* Vsr() const;
 
   //! Returns the next reflected VS_Environment in the 
   //! DtReflectedOCEAN2020FOMVS_EnvironmentList.
   virtual DtReflectedOCEAN2020FOMVS_Environment* next() const;
 
   //! Returns the previous reflected VS_Environment in the 
   //! DtReflectedOCEAN2020FOMVS_EnvironmentList.
   virtual DtReflectedOCEAN2020FOMVS_Environment* prev() const;
 
   //! Returns the next reflected VS_Environment. Will cycle back to the first 
   //! remote VS_Environment in the DtReflectedOCEAN2020FOMVS_EnvironmentList.
   virtual DtReflectedOCEAN2020FOMVS_Environment* wrapNext() const;
 
   //! Returns the previous reflected VS_Environment. Will cycle back to the first 
   //! remote VS_Environment in the DtReflectedOCEAN2020FOMVS_EnvironmentList.
   virtual DtReflectedOCEAN2020FOMVS_Environment* wrapPrev() const;
 
   //! Add a callback that is called when the DtReflectedOCEAN2020FOMVS_Environment is
   //! updated.
   virtual void addPostUpdateCallback(
      DtOCEAN2020FOMVS_EnvironmentCallbackFunction cb, void* userData);
 
   //! Remove the callback that is called when the DtReflectedOCEAN2020FOMVS_Environment
   //! is updated.
   virtual void removePostUpdateCallback(
      DtOCEAN2020FOMVS_EnvironmentCallbackFunction cb, void* userData);
 
public:
   //! Set the function to be called for creating state repositories.
   static DtStateRepCreator setStateRepCreator(DtStateRepCreator creator);
 
protected:
   //! Copy Constructor not implemented.
   DtReflectedOCEAN2020FOMVS_Environment(const DtReflectedOCEAN2020FOMVS_Environment& orig);
 
   //! Assignment operator not implemented.
   DtReflectedOCEAN2020FOMVS_Environment& operator=(const DtReflectedOCEAN2020FOMVS_Environment& orig);
 
protected:
   //! The function called to create state repositories.
   static DtStateRepCreator theStateRepCreator;
};
 
inline DtOCEAN2020FOMVS_EnvironmentStateRepository* DtReflectedOCEAN2020FOMVS_Environment::VS_EnvironmentStateRep() const
{ 
   return (DtOCEAN2020FOMVS_EnvironmentStateRepository*) myStateRep;
}
 
inline DtOCEAN2020FOMVS_EnvironmentStateRepository* DtReflectedOCEAN2020FOMVS_Environment::Vsr() const
{
   return (DtOCEAN2020FOMVS_EnvironmentStateRepository*) myStateRep;
}
 
} //end OCEAN2020
 
#endif
