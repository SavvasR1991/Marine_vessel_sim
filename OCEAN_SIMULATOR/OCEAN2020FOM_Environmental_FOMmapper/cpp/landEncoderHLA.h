/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hobjEncHeader.tlt
*********************************************************************/
 
//! \file landEncoderHLA.h
//! \brief Contains the DtOCEAN2020FOMLandEncoder class declaration.
 
#pragma once
 
#if DtHLA
 
#include "VS_EnvironmentEncoderHLA.h"
#include "dllExport.h"
 
namespace OCEAN2020 {
 
class DtOCEAN2020FOMLandStateRepository;
 
//! Instances of DtOCEAN2020FOMLandEncoder encode data
//! from DtOCEAN2020FOMLandStateRepository objects to the net
//! structures to be sent to the network.
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtOCEAN2020FOMLandEncoder : public DtOCEAN2020FOMVS_EnvironmentEncoder
{
public:
 
   //! Default constructor.
   DtOCEAN2020FOMLandEncoder(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMLandEncoder();
 
   //! Copy constructor.
   DtOCEAN2020FOMLandEncoder(const DtOCEAN2020FOMLandEncoder& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMLandEncoder& operator=(const DtOCEAN2020FOMLandEncoder& orig);
 
public:
   //! Function that creates a DtOCEAN2020FOMLandEncoder.
   static DtHlaStateEncoder* create(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
   
protected:

   //! Return true if LandRegionId needs to be sent
   //! to the network, false otherwise.
   static bool needLandRegionId(
      const DtOCEAN2020FOMLandStateRepository& stateRep, 
      const DtOCEAN2020FOMLandStateRepository& asSeenByRemote);
 
   //! Encodes LandRegionId from rep into attrs.
   static void encodeLandRegionId(
      const DtOCEAN2020FOMLandStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if TerrainType needs to be sent
   //! to the network, false otherwise.
   static bool needTerrainType(
      const DtOCEAN2020FOMLandStateRepository& stateRep, 
      const DtOCEAN2020FOMLandStateRepository& asSeenByRemote);
 
   //! Encodes TerrainType from rep into attrs.
   static void encodeTerrainType(
      const DtOCEAN2020FOMLandStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if SnowAccumulation needs to be sent
   //! to the network, false otherwise.
   static bool needSnowAccumulation(
      const DtOCEAN2020FOMLandStateRepository& stateRep, 
      const DtOCEAN2020FOMLandStateRepository& asSeenByRemote);
 
   //! Encodes SnowAccumulation from rep into attrs.
   static void encodeSnowAccumulation(
      const DtOCEAN2020FOMLandStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

   //! Return true if IceAccretion needs to be sent
   //! to the network, false otherwise.
   static bool needIceAccretion(
      const DtOCEAN2020FOMLandStateRepository& stateRep, 
      const DtOCEAN2020FOMLandStateRepository& asSeenByRemote);
 
   //! Encodes IceAccretion from rep into attrs.
   static void encodeIceAccretion(
      const DtOCEAN2020FOMLandStateRepository& rep,
      RTI::AttributeHandleValuePairSet* attrs,
      RTI::AttributeHandle attrHandle);

};
 
} //end OCEAN2020
 
#endif
