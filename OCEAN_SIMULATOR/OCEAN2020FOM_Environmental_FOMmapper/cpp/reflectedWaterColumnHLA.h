/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hrefObjHeader.tlt
*********************************************************************/
 
//! \file <!HlaRefObj!>.h
//! \brief Contains the DtReflectedOCEAN2020FOMWaterColumn class declaration.
//! \ingroup OCEAN2020FOM_Environmental
 
#pragma once
 
#if DtHLA
 
#include <vl/reflectedObjectHLA.h>
#include "dllExport.h"
#include "waterColumnStateRepository.h"
 
namespace OCEAN2020 {
 
class DtReflectedOCEAN2020FOMWaterColumn;
 
//! Signature of the callback function that takes a DtReflectedOCEAN2020FOMWaterColumn
//! and user data
//! \ingroup OCEAN2020FOM_Environmental
typedef void (*DtOCEAN2020FOMWaterColumnCallbackFunction)(
   DtReflectedOCEAN2020FOMWaterColumn* obj, void* userData);
 
//! Instances of DtReflectedOCEAN2020FOMWaterColumn are used to represent a
//! simulated HLAobjectRoot.VS_Environment.WaterColumn
//! object reflected across a network. 
//! \ingroup OCEAN2020FOM_Environmental
class DT_DLL_OCEAN2020FOM_ENVIRONMENTAL DtReflectedOCEAN2020FOMWaterColumn : public DtReflectedObject
{
public:
   //! Function prototype for functions that create a
   //! DtOCEAN2020FOMWaterColumnStateRepository.
   typedef DtOCEAN2020FOMWaterColumnStateRepository* (*DtStateRepCreator)();
 
public:
   //! Constructor.
   DtReflectedOCEAN2020FOMWaterColumn(DtHlaObject* obj, DtExerciseConn* exConn);
 
   //! Destructor.
   virtual ~DtReflectedOCEAN2020FOMWaterColumn();
 
   //! Returns the WaterColumn's state repository.
   virtual DtOCEAN2020FOMWaterColumnStateRepository* waterColumnStateRep() const;
 
   //! Shorter version of lifeformRep.
   virtual DtOCEAN2020FOMWaterColumnStateRepository* wsr() const;
 
   //! Returns the next reflected WaterColumn in the 
   //! DtReflectedOCEAN2020FOMWaterColumnList.
   virtual DtReflectedOCEAN2020FOMWaterColumn* next() const;
 
   //! Returns the previous reflected WaterColumn in the 
   //! DtReflectedOCEAN2020FOMWaterColumnList.
   virtual DtReflectedOCEAN2020FOMWaterColumn* prev() const;
 
   //! Returns the next reflected WaterColumn. Will cycle back to the first 
   //! remote WaterColumn in the DtReflectedOCEAN2020FOMWaterColumnList.
   virtual DtReflectedOCEAN2020FOMWaterColumn* wrapNext() const;
 
   //! Returns the previous reflected WaterColumn. Will cycle back to the first 
   //! remote WaterColumn in the DtReflectedOCEAN2020FOMWaterColumnList.
   virtual DtReflectedOCEAN2020FOMWaterColumn* wrapPrev() const;
 
   //! Add a callback that is called when the DtReflectedOCEAN2020FOMWaterColumn is
   //! updated.
   virtual void addPostUpdateCallback(
      DtOCEAN2020FOMWaterColumnCallbackFunction cb, void* userData);
 
   //! Remove the callback that is called when the DtReflectedOCEAN2020FOMWaterColumn
   //! is updated.
   virtual void removePostUpdateCallback(
      DtOCEAN2020FOMWaterColumnCallbackFunction cb, void* userData);
 
public:
   //! Set the function to be called for creating state repositories.
   static DtStateRepCreator setStateRepCreator(DtStateRepCreator creator);
 
protected:
   //! Copy Constructor not implemented.
   DtReflectedOCEAN2020FOMWaterColumn(const DtReflectedOCEAN2020FOMWaterColumn& orig);
 
   //! Assignment operator not implemented.
   DtReflectedOCEAN2020FOMWaterColumn& operator=(const DtReflectedOCEAN2020FOMWaterColumn& orig);
 
protected:
   //! The function called to create state repositories.
   static DtStateRepCreator theStateRepCreator;
};
 
inline DtOCEAN2020FOMWaterColumnStateRepository* DtReflectedOCEAN2020FOMWaterColumn::waterColumnStateRep() const
{ 
   return (DtOCEAN2020FOMWaterColumnStateRepository*) myStateRep;
}
 
inline DtOCEAN2020FOMWaterColumnStateRepository* DtReflectedOCEAN2020FOMWaterColumn::wsr() const
{
   return (DtOCEAN2020FOMWaterColumnStateRepository*) myStateRep;
}
 
} //end OCEAN2020
 
#endif
