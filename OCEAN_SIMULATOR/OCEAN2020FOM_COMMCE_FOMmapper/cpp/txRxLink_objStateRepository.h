/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**stateRepHeader.tlt
*********************************************************************/
 
//! \file txRxLink_objStateRepository.h
//! \brief Contains the DtOCEAN2020FOMTxRxLink_objStateRepository class declaration.
//! \ingroup OCEAN2020FOM_COMMCE
 
#pragma once
 
#include "dllExport.h"
#include <vl/stateRepository.h>
#include <matrix/vlVector.h>
#include <vl/globalObjectDesignator.h>
#include <vl/hlaLogicalTime.h>
#include <vl/hlaLogicalTimeInterval.h>
#include <vlpi/entityType.h>
#include <vlpi/entityIdentifier.h>
#include <vlutil/vlString.h>
#include "DataTypes/OCEAN2020FOM_COMMCEEnums.h"
#include <vector>
 

namespace OCEAN2020 {
 
//! Instances of DtOCEAN2020FOMTxRxLink_objStateRepository are used to store state data for
//! TxRxLink_obj objects.
//! \ingroup OCEAN2020FOM_COMMCE
class DT_DLL_OCEAN2020FOM_COMMCE DtOCEAN2020FOMTxRxLink_objStateRepository : public DtStateRepository
{
public:
   //! Constructor.
   DtOCEAN2020FOMTxRxLink_objStateRepository();
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMTxRxLink_objStateRepository();
 
   //! Copy Constructor.
   DtOCEAN2020FOMTxRxLink_objStateRepository(const DtOCEAN2020FOMTxRxLink_objStateRepository& orig);
 
   //! Assignment Operator.
   DtOCEAN2020FOMTxRxLink_objStateRepository& operator=(const DtOCEAN2020FOMTxRxLink_objStateRepository& orig);
 
   //! Return a copy/empty object of the same type as this.
   virtual DtStateRepository* clone(bool copy) const;
 
   //! Create a DtOCEAN2020FOMTxRxLink_objStateRepository.
   static DtOCEAN2020FOMTxRxLink_objStateRepository* create();
   
   //! Print data to the DtInfo stream
   virtual void printData() const;
 
   //! Print data to the specified stream
   virtual void printDataToStream(std::ostream& stream) const;
 

   //! Set the Capacity.
   virtual void setCapacity(DtFloat32 val);
 
   //! Get the Capacity."
   virtual DtFloat32 capacity() const;

   //! Set the Frequency.
   virtual void setFrequency(DtU64 val);
 
   //! Get the Frequency."
   virtual DtU64 frequency() const;

   //! Set the LinkStatus.
   virtual void setLinkStatus(bool val);
 
   //! Get the LinkStatus."
   virtual bool linkStatus() const;

   //! Set the Rx_ObjectID.
   virtual void setRx_ObjectID(const DtGlobalObjectDesignator& val);
 
   //! Get the Rx_ObjectID."
   virtual const DtGlobalObjectDesignator& rx_ObjectID() const;

   //! Set the SN.
   virtual void setSN(DtFloat32 val);
 
   //! Get the SN."
   virtual DtFloat32 SN() const;

   //! Set the Tx_ObjectID.
   virtual void setTx_ObjectID(const DtGlobalObjectDesignator& val);
 
   //! Get the Tx_ObjectID."
   virtual const DtGlobalObjectDesignator& tx_ObjectID() const;

   //! Set the BER.
   virtual void setBER(DtFloat32 val);
 
   //! Get the BER."
   virtual DtFloat32 BER() const;

   //! Set the SER.
   virtual void setSER(DtFloat32 val);
 
   //! Get the SER."
   virtual DtFloat32 SER() const;

   //! Set the Modulation.
   virtual void setModulation(const DtString& val);
 
   //! Get the Modulation."
   virtual const DtString& modulation() const;

protected:
   DtFloat32 myCapacity;
   DtU64 myFrequency;
   bool myLinkStatus;
   DtGlobalObjectDesignator myRx_ObjectID;
   DtFloat32 mySN;
   DtGlobalObjectDesignator myTx_ObjectID;
   DtFloat32 myBER;
   DtFloat32 mySER;
   DtString myModulation;
};

} //end OCEAN2020
