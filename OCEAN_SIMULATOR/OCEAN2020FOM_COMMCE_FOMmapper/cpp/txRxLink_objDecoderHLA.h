/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hobjDecHeader.tlt
*********************************************************************/
 
//! \file txRxLink_objDecoderHLA.h
//! \brief Contains the DtOCEAN2020FOMTxRxLink_objDecoder class declaration.
//! \ingroup OCEAN2020FOM_COMMCE
 
#pragma once
 
#if DtHLA 
 
#include <vl/hlaStateDecoder.h>
#include "dllExport.h"
 
namespace OCEAN2020 {
 
class DtOCEAN2020FOMTxRxLink_objStateRepository;
 
//! Instances of DtOCEAN2020FOMTxRxLink_objDecoder are used to decode
//! data from the network into DtOCEAN2020FOMTxRxLink_objStateRepository objects.
//! \ingroup OCEAN2020FOM_COMMCE
class DT_DLL_OCEAN2020FOM_COMMCE DtOCEAN2020FOMTxRxLink_objDecoder : public DtHlaStateDecoder
{
public:
   //! Default constructor.
   DtOCEAN2020FOMTxRxLink_objDecoder(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMTxRxLink_objDecoder();
 
   //! Copy constructor.
   DtOCEAN2020FOMTxRxLink_objDecoder(const DtOCEAN2020FOMTxRxLink_objDecoder& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMTxRxLink_objDecoder& operator=(const DtOCEAN2020FOMTxRxLink_objDecoder& orig);
 
public:
   //! Creates an instance of DtOCEAN2020FOMTxRxLink_objDecoder.
   static DtHlaStateDecoder* create(
      DtExerciseConn* exConn,
      DtObjClassDesc* classDesc);
 
protected:
   
//! Decodes Capacity from attrs into rep.
   static void decodeCapacity(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Frequency from attrs into rep.
   static void decodeFrequency(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes LinkStatus from attrs into rep.
   static void decodeLinkStatus(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Rx_ObjectID from attrs into rep.
   static void decodeRx_ObjectID(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SN from attrs into rep.
   static void decodeSN(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Tx_ObjectID from attrs into rep.
   static void decodeTx_ObjectID(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes BER from attrs into rep.
   static void decodeBER(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes SER from attrs into rep.
   static void decodeSER(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);
   
//! Decodes Modulation from attrs into rep.
   static void decodeModulation(
      DtOCEAN2020FOMTxRxLink_objStateRepository* rep,
      const RTI::AttributeHandleValuePairSet& attrs,
      int pairSetIndex);

};
 
} //end OCEAN2020
 
#endif
