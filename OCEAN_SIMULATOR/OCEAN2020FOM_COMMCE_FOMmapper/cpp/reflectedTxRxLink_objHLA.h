/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hrefObjHeader.tlt
*********************************************************************/
 
//! \file <!HlaRefObj!>.h
//! \brief Contains the DtReflectedOCEAN2020FOMTxRxLink_obj class declaration.
//! \ingroup OCEAN2020FOM_COMMCE

#pragma once
 
#if DtHLA
 
#include <vl/reflectedObjectHLA.h>
#include "dllExport.h"
#include "txRxLink_objStateRepository.h"
 
namespace OCEAN2020 {
 
class DtReflectedOCEAN2020FOMTxRxLink_obj;
 
//! Signature of the callback function that takes a DtReflectedOCEAN2020FOMTxRxLink_obj
//! and user data
//! \ingroup OCEAN2020FOM_COMMCE
typedef void (*DtOCEAN2020FOMTxRxLink_objCallbackFunction)(
   DtReflectedOCEAN2020FOMTxRxLink_obj* obj, void* userData);
 
//! Instances of DtReflectedOCEAN2020FOMTxRxLink_obj are used to represent a
//! simulated HLAobjectRoot.TxRxLink_obj
//! object reflected across a network. 
//! \ingroup OCEAN2020FOM_COMMCE
class DT_DLL_OCEAN2020FOM_COMMCE DtReflectedOCEAN2020FOMTxRxLink_obj : public DtReflectedObject
{
public:
   //! Function prototype for functions that create a
   //! DtOCEAN2020FOMTxRxLink_objStateRepository.
   typedef DtOCEAN2020FOMTxRxLink_objStateRepository* (*DtStateRepCreator)();
 
public:
   //! Constructor.
   DtReflectedOCEAN2020FOMTxRxLink_obj(DtHlaObject* obj, DtExerciseConn* exConn);
 
   //! Destructor.
   virtual ~DtReflectedOCEAN2020FOMTxRxLink_obj();
 
   //! Returns the TxRxLink_obj's state repository.
   virtual DtOCEAN2020FOMTxRxLink_objStateRepository* txRxLink_objStateRep() const;
 
   //! Shorter version of lifeformRep.
   virtual DtOCEAN2020FOMTxRxLink_objStateRepository* tsr() const;
 
   //! Returns the next reflected TxRxLink_obj in the 
   //! DtReflectedOCEAN2020FOMTxRxLink_objList.
   virtual DtReflectedOCEAN2020FOMTxRxLink_obj* next() const;
 
   //! Returns the previous reflected TxRxLink_obj in the 
   //! DtReflectedOCEAN2020FOMTxRxLink_objList.
   virtual DtReflectedOCEAN2020FOMTxRxLink_obj* prev() const;
 
   //! Returns the next reflected TxRxLink_obj. Will cycle back to the first 
   //! remote TxRxLink_obj in the DtReflectedOCEAN2020FOMTxRxLink_objList.
   virtual DtReflectedOCEAN2020FOMTxRxLink_obj* wrapNext() const;
 
   //! Returns the previous reflected TxRxLink_obj. Will cycle back to the first 
   //! remote TxRxLink_obj in the DtReflectedOCEAN2020FOMTxRxLink_objList.
   virtual DtReflectedOCEAN2020FOMTxRxLink_obj* wrapPrev() const;
 
   //! Add a callback that is called when the DtReflectedOCEAN2020FOMTxRxLink_obj is
   //! updated.
   virtual void addPostUpdateCallback(
      DtOCEAN2020FOMTxRxLink_objCallbackFunction cb, void* userData);
 
   //! Remove the callback that is called when the DtReflectedOCEAN2020FOMTxRxLink_obj
   //! is updated.
   virtual void removePostUpdateCallback(
      DtOCEAN2020FOMTxRxLink_objCallbackFunction cb, void* userData);
 
public:
   //! Set the function to be called for creating state repositories.
   static DtStateRepCreator setStateRepCreator(DtStateRepCreator creator);
 
protected:
   //! Copy Constructor not implemented.
   DtReflectedOCEAN2020FOMTxRxLink_obj(const DtReflectedOCEAN2020FOMTxRxLink_obj& orig);
 
   //! Assignment operator not implemented.
   DtReflectedOCEAN2020FOMTxRxLink_obj& operator=(const DtReflectedOCEAN2020FOMTxRxLink_obj& orig);
 
protected:
   //! The function called to create state repositories.
   static DtStateRepCreator theStateRepCreator;
};
 
inline DtOCEAN2020FOMTxRxLink_objStateRepository* DtReflectedOCEAN2020FOMTxRxLink_obj::txRxLink_objStateRep() const
{ 
   return (DtOCEAN2020FOMTxRxLink_objStateRepository*) myStateRep;
}
 
inline DtOCEAN2020FOMTxRxLink_objStateRepository* DtReflectedOCEAN2020FOMTxRxLink_obj::tsr() const
{
   return (DtOCEAN2020FOMTxRxLink_objStateRepository*) myStateRep;
}
 
} //end OCEAN2020
 
#endif
