/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**variantRecordsHeader.tlt
*********************************************************************/
 
#pragma once
 
#include "../dllExportOCEAN2020FOM_SISOSTD00112015.h"
#include "OCEAN2020FOM_SISOSTD00112015Enums.h"
#include <vlutil/vlMachineTypes.h>
#include <matrix/vlVector.h>
#include <vl/globalObjectDesignator.h>
#include <vlpi/entityType.h>
#include <vlpi/entityIdentifier.h>
#include <vlutil/vlString.h>
#include <vector>
 
#include "OCEAN2020FOMBeamAntennaStruct.h"
#include "OCEAN2020FOMSphericalHarmonicAntennaStruct.h"
 namespace OCEAN2020 {
 
//! \class  DtOCEAN2020FOMAntennaPatternVariantStruct
 
//! \ingroup OCEAN2020FOM_SISOSTD00112015
class DT_DLL_OCEAN2020FOM_SISOSTD00112015 DtOCEAN2020FOMAntennaPatternVariantStruct
{
public:
   DtOCEAN2020FOMAntennaPatternVariantStruct();
 
   ~DtOCEAN2020FOMAntennaPatternVariantStruct();
 
   DtOCEAN2020FOMAntennaPatternVariantStruct(const DtOCEAN2020FOMAntennaPatternVariantStruct& orig);
 
   DtOCEAN2020FOMAntennaPatternVariantStruct& operator=(const DtOCEAN2020FOMAntennaPatternVariantStruct& orig);
 
   // Discriminant
   virtual void setAntennaPatternType(const DtAntennaPatternTypeEnum32& val);
   virtual const DtAntennaPatternTypeEnum32 AntennaPatternType() const;

   virtual void setDtOCEAN2020FOMBeamAntenna(const DtOCEAN2020FOMBeamAntennaStruct& val);
   virtual const DtOCEAN2020FOMBeamAntennaStruct& dtOCEAN2020FOMBeamAntenna() const;

   virtual void setDtOCEAN2020FOMSphericalHarmonicAntenna(const DtOCEAN2020FOMSphericalHarmonicAntennaStruct& val);
   virtual const DtOCEAN2020FOMSphericalHarmonicAntennaStruct& dtOCEAN2020FOMSphericalHarmonicAntenna() const;

   bool operator==(const DtOCEAN2020FOMAntennaPatternVariantStruct& other) const;
   bool operator!=(const DtOCEAN2020FOMAntennaPatternVariantStruct& other) const;
   
   int netSize() const;
   static int octetBoundary();
   unsigned int getPaddingSize(unsigned int byteOffset, unsigned int boundary) const;
 
   void writeToBuffer( char* buffer ) const;
   void fillFromBuffer( const char* buffer, int bufferSize, int offset );
 
   virtual void printData() const;
   virtual void printDataToStream(std::ostream &) const;
 
private:   
 
   void deleteAlternative();
 
protected:
 
   //Discriminant
   DtAntennaPatternTypeEnum32 myAntennaPatternType;
   
   //Alternatives
   void *myAlternative;
};
 
DT_DLL_OCEAN2020FOM_SISOSTD00112015 std::ostream& operator<<(std::ostream& stream, const DtOCEAN2020FOMAntennaPatternVariantStruct&);

} //end OCEAN2020
