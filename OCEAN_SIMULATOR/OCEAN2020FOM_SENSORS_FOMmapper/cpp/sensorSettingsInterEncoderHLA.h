/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hintEncHeader.tlt
*********************************************************************/
 
//! \file sensorSettingsInterEncoderHLA.h
//! \brief This file provides a declaration of the class
//! DtOCEAN2020FOMSensorSettingsInterEncoder.
 
#pragma once
 
#if DtHLA 
 
#include <vl/interactionEncoder.h>
#include "dllExport.h"
 
namespace OCEAN2020 {
 
class DtOCEAN2020FOMSensorSettingsInter;
 
//! Instances of DtOCEAN2020FOMSensorSettingsInterEncoder are used to encode
//! data from DtOCEAN2020FOMSensorSettingsInter objects into
//! network structures.
//! \ingroup OCEAN2020FOM_SENSORS
class DT_DLL_OCEAN2020FOM_SENSORS DtOCEAN2020FOMSensorSettingsInterEncoder : public DtInteractionEncoder
{
public:
   //! Constructor.
   DtOCEAN2020FOMSensorSettingsInterEncoder(DtExerciseConn* exConn,
      DtInterClassDesc* classDesc);
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMSensorSettingsInterEncoder();
 
   //! Copy constructor.
   DtOCEAN2020FOMSensorSettingsInterEncoder(const DtOCEAN2020FOMSensorSettingsInterEncoder& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMSensorSettingsInterEncoder& operator=(const DtOCEAN2020FOMSensorSettingsInterEncoder& orig);
 
protected:

   //! Encodes ConfigName from inter into params.
   static void encodeConfigName(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes Mode from inter into params.
   static void encodeMode(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes BlackHot from inter into params.
   static void encodeBlackHot(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes Blur from inter into params.
   static void encodeBlur(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes BlurLevel from inter into params.
   static void encodeBlurLevel(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes Noise from inter into params.
   static void encodeNoise(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes NoiseLevel from inter into params.
   static void encodeNoiseLevel(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes ManualGainControl from inter into params.
   static void encodeManualGainControl(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes Contrast from inter into params.
   static void encodeContrast(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

   //! Encodes Brightness from inter into params.
   static void encodeBrightness(
      const DtOCEAN2020FOMSensorSettingsInter& inter,
      RTI::ParameterHandleValuePairSet* params,
      RTI::ParameterHandle paramHandle);

};
 
} //end OCEAN2020
 
#endif
