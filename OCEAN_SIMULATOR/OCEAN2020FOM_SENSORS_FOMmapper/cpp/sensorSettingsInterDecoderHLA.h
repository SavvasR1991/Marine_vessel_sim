/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hintDecHeader.tlt
*********************************************************************/
 
//! \file sensorSettingsInterDecoderHLA.h
//! \brief Contains the DtOCEAN2020FOMSensorSettingsInterDecoder class declaration.
//! \ingroup OCEAN2020FOM_SENSORS
 
#pragma once
 
#if DtHLA 
 
#include <vl/interactionDecoder.h>
#include "dllExport.h"
 
namespace OCEAN2020 {
 
class DtOCEAN2020FOMSensorSettingsInter;
 
//! Instances of DtOCEAN2020FOMSensorSettingsInterDecoder are used to decode
//! data from the network into DtOCEAN2020FOMSensorSettingsInter
//! objects.
//! \ingroup OCEAN2020FOM_SENSORS
class DT_DLL_OCEAN2020FOM_SENSORS DtOCEAN2020FOMSensorSettingsInterDecoder : public DtInteractionDecoder
{
public:
   //! Constructor.
   DtOCEAN2020FOMSensorSettingsInterDecoder(DtExerciseConn* exConn,
      DtInterClassDesc* classDesc);
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMSensorSettingsInterDecoder();
 
   //! Copy constructor.
   DtOCEAN2020FOMSensorSettingsInterDecoder(const DtOCEAN2020FOMSensorSettingsInterDecoder& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMSensorSettingsInterDecoder& operator=(const DtOCEAN2020FOMSensorSettingsInterDecoder& orig);
 
protected:

   //! Decodes ConfigName from params into inter.
   static void decodeConfigName(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes Mode from params into inter.
   static void decodeMode(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes BlackHot from params into inter.
   static void decodeBlackHot(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes Blur from params into inter.
   static void decodeBlur(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes BlurLevel from params into inter.
   static void decodeBlurLevel(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes Noise from params into inter.
   static void decodeNoise(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes NoiseLevel from params into inter.
   static void decodeNoiseLevel(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes ManualGainControl from params into inter.
   static void decodeManualGainControl(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes Contrast from params into inter.
   static void decodeContrast(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

   //! Decodes Brightness from params into inter.
   static void decodeBrightness(
      DtOCEAN2020FOMSensorSettingsInter* inter,
      const RTI::ParameterHandleValuePairSet& params,
      int pairSetIndex);

};
 
} //end OCEAN2020
 
#endif
