/*********************************************************************
**This file was generated by MAK Technologies' VR-Link Code Generator.
**hinterHeader.tlt
*********************************************************************/
 
//! \file sensorSettingsInterHLA.h
//! \brief Contains the DtOCEAN2020FOMSensorSettingsInter class declaration.
//! \ingroup OCEAN2020FOM_SENSORS
 
#pragma once
 
#if DtHLA 
 
#include "dllExport.h"
#include <vl/interactionWithEncDec.h>
#include "DataTypes/OCEAN2020FOM_SENSORSEnums.h"
#include <vlutil/vlString.h>
#include <vl/globalObjectDesignator.h>
#include <vl/hlaLogicalTime.h>
#include <vl/hlaLogicalTimeInterval.h>
#include <vlpi/entityType.h>
#include <vlpi/entityIdentifier.h>
#include <matrix/vlVector.h>
 
 
class DtExerciseConn;
 namespace OCEAN2020 {
 
class DtOCEAN2020FOMSensorSettingsInter;
 
//! DtOCEAN2020FOMSensorSettingsInter  callback function signature.
typedef void (*DtOCEAN2020FOMSensorSettingsInterCb) (DtOCEAN2020FOMSensorSettingsInter* inter, 
   void* usr);
 
//! Instances of DtOCEAN2020FOMSensorSettingsInter are used to store state data for
//! SensorSettings interactions.
//! \ingroup OCEAN2020FOM_SENSORS
class DT_DLL_OCEAN2020FOM_SENSORS DtOCEAN2020FOMSensorSettingsInter : public DtInteractionWithEncDec
{
public:
 
   //! Constructor.
   DtOCEAN2020FOMSensorSettingsInter();
 
   //! Destructor.
   virtual ~DtOCEAN2020FOMSensorSettingsInter();
 
   //! Copy constructor.
   DtOCEAN2020FOMSensorSettingsInter(const DtOCEAN2020FOMSensorSettingsInter& orig);
 
   //! Assignment operator.
   DtOCEAN2020FOMSensorSettingsInter& operator=(const DtOCEAN2020FOMSensorSettingsInter& orig);
 
   //! Print the interaction's data.
   virtual void printData() const;
 
   //! Print the interaction's data to the specified stream
   virtual void printDataToStream(std::ostream& stream) const;
   

   //! ConfigName mutator.
   virtual void setConfigName(const DtString& val);
 
   //! ConfigName accessor.
   virtual const DtString& configName() const;
 


   //! Mode mutator.
   virtual void setMode(const DtSensorMode& val);
 
   //! Mode accessor.
   virtual const DtSensorMode& mode() const;
 


   //! BlackHot mutator.
   virtual void setBlackHot(bool val);
 
   //! BlackHot accessor.
   virtual bool blackHot() const;
 


   //! Blur mutator.
   virtual void setBlur(bool val);
 
   //! Blur accessor.
   virtual bool blur() const;
 


   //! BlurLevel mutator.
   virtual void setBlurLevel(DtFloat32 val);
 
   //! BlurLevel accessor.
   virtual DtFloat32 blurLevel() const;
 


   //! Noise mutator.
   virtual void setNoise(bool val);
 
   //! Noise accessor.
   virtual bool noise() const;
 


   //! NoiseLevel mutator.
   virtual void setNoiseLevel(DtFloat32 val);
 
   //! NoiseLevel accessor.
   virtual DtFloat32 noiseLevel() const;
 


   //! ManualGainControl mutator.
   virtual void setManualGainControl(bool val);
 
   //! ManualGainControl accessor.
   virtual bool manualGainControl() const;
 


   //! Contrast mutator.
   virtual void setContrast(DtFloat32 val);
 
   //! Contrast accessor.
   virtual DtFloat32 contrast() const;
 


   //! Brightness mutator.
   virtual void setBrightness(DtFloat32 val);
 
   //! Brightness accessor.
   virtual DtFloat32 brightness() const;
 


      
   //! Name of the interaction. (Not necessarily the ClassName from the FOM.)
   virtual const char* name() const { return "DtOCEAN2020FOMSensorSettingsInter"; }
 
public:
 
   //! Create a DtOCEAN2020FOMSensorSettingsInter.
   //! Caller is responsible for deletion.
   static DtInteraction* create();
 
   //! Add (register)/Remove (deregister) function to be called when
   //! interaction occurs.
   static void addCallback(DtExerciseConn* conn,
      DtOCEAN2020FOMSensorSettingsInterCb cb, void* usr,
      DtDDMRegionSP region = DtDDMRegionSP());
   static void removeCallback(DtExerciseConn* conn,
      DtOCEAN2020FOMSensorSettingsInterCb cb, void* usr,
      DtDDMRegionSP region = DtDDMRegionSP());
 
protected:
   virtual const char* interactionClassToUse(DtExerciseConn* exConn) const;
 
   virtual DtInteractionDecoder* createDecoder(DtExerciseConn* exConn) const;
   virtual DtInteractionEncoder* createEncoder(DtExerciseConn* exConn) const;
      
      
protected:
   DtString myConfigName;
   DtSensorMode myMode;
   bool myBlackHot;
   bool myBlur;
   DtFloat32 myBlurLevel;
   bool myNoise;
   DtFloat32 myNoiseLevel;
   bool myManualGainControl;
   DtFloat32 myContrast;
   DtFloat32 myBrightness;

};

} //end OCEAN2020
 
#endif
